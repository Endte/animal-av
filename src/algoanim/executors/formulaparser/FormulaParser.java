/* Generated By:JJTree&JavaCC: Do not edit this line. FormulaParser.java */
package algoanim.executors.formulaparser;
public class FormulaParser/*@bgen(jjtree)*/implements FormulaParserTreeConstants, FormulaParserConstants {/*@bgen(jjtree)*/
  protected JJTFormulaParserState jjtree = new JJTFormulaParserState();

  @SuppressWarnings("unused")
  final public SimpleNode query() throws ParseException {
                                   /*@bgen(jjtree) Root */
  Root jjtn000 = new Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case NUMBER:
      case 11:
        plusExpr();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(0);
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                               {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte000;}
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte000;}
                                         }
                                         {if (true) throw (Error)jjte000;}
    } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
    }
    throw new Error("Missing return statement in function");
  }

  final public void plusExpr() throws ParseException {
    minusExpr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(PLUS);
                                                                      Plus jjtn001 = new Plus(this, JJTPLUS);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
      try {
        minusExpr();
      } catch (Throwable jjte001) {
                                                                      if (jjtc001) {
                                                                        jjtree.clearNodeScope(jjtn001);
                                                                        jjtc001 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte001 instanceof RuntimeException) {
                                                                        {if (true) throw (RuntimeException)jjte001;}
                                                                      }
                                                                      if (jjte001 instanceof ParseException) {
                                                                        {if (true) throw (ParseException)jjte001;}
                                                                      }
                                                                      {if (true) throw (Error)jjte001;}
      } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                      }
      }
    }
  }

  final public void minusExpr() throws ParseException {
    multExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(MINUS);
                                                                      Minus jjtn001 = new Minus(this, JJTMINUS);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
      try {
        multExpr();
      } catch (Throwable jjte001) {
                                                                      if (jjtc001) {
                                                                        jjtree.clearNodeScope(jjtn001);
                                                                        jjtc001 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte001 instanceof RuntimeException) {
                                                                        {if (true) throw (RuntimeException)jjte001;}
                                                                      }
                                                                      if (jjte001 instanceof ParseException) {
                                                                        {if (true) throw (ParseException)jjte001;}
                                                                      }
                                                                      {if (true) throw (Error)jjte001;}
      } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                      }
      }
    }
  }

  final public void multExpr() throws ParseException {
    divExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(MULT);
                                                                    Mult jjtn001 = new Mult(this, JJTMULT);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
      try {
        divExpr();
      } catch (Throwable jjte001) {
                                                                    if (jjtc001) {
                                                                      jjtree.clearNodeScope(jjtn001);
                                                                      jjtc001 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte001 instanceof RuntimeException) {
                                                                      {if (true) throw (RuntimeException)jjte001;}
                                                                    }
                                                                    if (jjte001 instanceof ParseException) {
                                                                      {if (true) throw (ParseException)jjte001;}
                                                                    }
                                                                    {if (true) throw (Error)jjte001;}
      } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                    }
      }
    }
  }

  final public void divExpr() throws ParseException {
    terminal();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(DIV);
                                                                    Div jjtn001 = new Div(this, JJTDIV);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
      try {
        terminal();
      } catch (Throwable jjte001) {
                                                                    if (jjtc001) {
                                                                      jjtree.clearNodeScope(jjtn001);
                                                                      jjtc001 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte001 instanceof RuntimeException) {
                                                                      {if (true) throw (RuntimeException)jjte001;}
                                                                    }
                                                                    if (jjte001 instanceof ParseException) {
                                                                      {if (true) throw (ParseException)jjte001;}
                                                                    }
                                                                    {if (true) throw (Error)jjte001;}
      } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                    }
      }
    }
  }

  final public void klammer() throws ParseException {
    jj_consume_token(11);
    plusExpr();
    jj_consume_token(12);
  }

  final public void terminal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      number();
      break;
    case IDENTIFIER:
      identifier();
      break;
    case 11:
      klammer();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void number() throws ParseException {
                                           /*@bgen(jjtree) Number */
                                            Number jjtn000 = new Number(this, JJTNUMBER);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                      jjtc000 = false;
                                                                      jjtn000.setToken(t.kind,t.image);
    } finally {
                                                           if (jjtc000) {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                           }
    }
  }

  final public void identifier() throws ParseException {
                                           /*@bgen(jjtree) Identifier */
                                            Identifier jjtn000 = new Identifier(this, JJTIDENTIFIER);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                          jjtn000.setToken(t.kind,t.image);
    } finally {
                                                           if (jjtc000) {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                           }
    }
  }

  /** Generated Token Manager. */
  public FormulaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe00,0x80,0x100,0x20,0x40,0xe00,};
   }

  /** Constructor with InputStream. */
  public FormulaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FormulaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void reInit(java.io.InputStream stream) {
     reInit(stream, null);
  }
  /** Reinitialise. */
  public void reInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.reInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.reInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FormulaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void reInit(java.io.Reader stream) {
    jj_input_stream.reInit(stream, 1, 1);
    token_source.reInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FormulaParser(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void reInit(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[13];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 13; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                            }
