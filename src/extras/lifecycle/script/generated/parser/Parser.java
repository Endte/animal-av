/* This file was generated by SableCC (http://www.sablecc.org/). */

package extras.lifecycle.script.generated.parser;

import extras.lifecycle.script.generated.lexer.*;
import extras.lifecycle.script.generated.node.*;
import extras.lifecycle.script.generated.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

import extras.lifecycle.script.generated.parser.Parser;
import extras.lifecycle.script.generated.parser.ParserException;
import extras.lifecycle.script.generated.parser.State;
import extras.lifecycle.script.generated.parser.TokenIndex;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AScript */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAsinglestatementsequence1StatementSequence */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAsinglestatementsequence2StatementSequence */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AStatementSequenceTail */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAssignStatement */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce AExpressiononlyStatement */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AExpression */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce ASingleExpression */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AAfunctionexpression1Expression */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AAfunctionexpression2Expression */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AAargument1Argument */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AAargument2Argument */
		    {
			ArrayList list = new11();
			push(goTo(5), list, false);
		    }
		    break;
                    case 12: /* reduce AArgumentTail */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AIdentifierValueExpression */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce ADecimalIntegerLiteralValueExpression */
		    {
			ArrayList list = new14();
			push(goTo(7), list, false);
		    }
		    break;
                    case 15: /* reduce AStringLiteralValueExpression */
		    {
			ArrayList list = new15();
			push(goTo(7), list, false);
		    }
		    break;
                    case 16: /* reduce ADecimalIntegerLiteral */
		    {
			ArrayList list = new16();
			push(goTo(8), list, false);
		    }
		    break;
                    case 17: /* reduce ATerminal$StatementSequenceTail */
		    {
			ArrayList list = new17();
			push(goTo(9), list, true);
		    }
		    break;
                    case 18: /* reduce ANonTerminal$StatementSequenceTail */
		    {
			ArrayList list = new18();
			push(goTo(9), list, true);
		    }
		    break;
                    case 19: /* reduce ATerminal$ArgumentTail */
		    {
			ArrayList list = new19();
			push(goTo(10), list, true);
		    }
		    break;
                    case 20: /* reduce ANonTerminal$ArgumentTail */
		    {
			ArrayList list = new20();
			push(goTo(10), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PScript node1 = (PScript) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AScript */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PScript pscriptNode1;
        {
            // Block
        PStatementSequence pstatementsequenceNode2;
        pstatementsequenceNode2 = (PStatementSequence)nodeArrayList1.get(0);

        pscriptNode1 = new AScript(pstatementsequenceNode2);
        }
	nodeList.add(pscriptNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAsinglestatementsequence1StatementSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementSequence pstatementsequenceNode1;
        {
            // Block
        PStatement pstatementNode2;
        TSemicolon tsemicolonNode3;
        LinkedList listNode4 = new LinkedList();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        }

        pstatementsequenceNode1 = new ASingleStatementSequence(pstatementNode2, tsemicolonNode3, listNode4);
        }
	nodeList.add(pstatementsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAsinglestatementsequence2StatementSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementSequence pstatementsequenceNode1;
        {
            // Block
        PStatement pstatementNode2;
        TSemicolon tsemicolonNode3;
        LinkedList listNode5 = new LinkedList();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementsequenceNode1 = new ASingleStatementSequence(pstatementNode2, tsemicolonNode3, listNode5);
        }
	nodeList.add(pstatementsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AStatementSequenceTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementSequenceTail pstatementsequencetailNode1;
        {
            // Block
        PStatement pstatementNode2;
        TSemicolon tsemicolonNode3;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstatementsequencetailNode1 = new AStatementSequenceTail(pstatementNode2, tsemicolonNode3);
        }
	nodeList.add(pstatementsequencetailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAssignStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TEq teqNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(tidentifierNode2, teqNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AExpressiononlyStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pstatementNode1 = new AExpressiononlyStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new AExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ASingleExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValueExpression pvalueexpressionNode2;
        pvalueexpressionNode2 = (PValueExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new ASingleExpression(pvalueexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAfunctionexpression1Expression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParenthesis tleftparenthesisNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParenthesis trightparenthesisNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        trightparenthesisNode5 = (TRightParenthesis)nodeArrayList3.get(0);

        pexpressionNode1 = new AFunctionExpression(tidentifierNode2, tleftparenthesisNode3, null, trightparenthesisNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAfunctionexpression2Expression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PArgument pargumentNode4;
        TRightParenthesis trightparenthesisNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        pargumentNode4 = (PArgument)nodeArrayList3.get(0);
        trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4.get(0);

        pexpressionNode1 = new AFunctionExpression(tidentifierNode2, tleftparenthesisNode3, pargumentNode4, trightparenthesisNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAargument1Argument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PValueExpression pvalueexpressionNode2;
        LinkedList listNode3 = new LinkedList();
        pvalueexpressionNode2 = (PValueExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pargumentNode1 = new AArgument(pvalueexpressionNode2, listNode3);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAargument2Argument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PValueExpression pvalueexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        pvalueexpressionNode2 = (PValueExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargumentNode1 = new AArgument(pvalueexpressionNode2, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AArgumentTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentTail pargumenttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PValueExpression pvalueexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvalueexpressionNode3 = (PValueExpression)nodeArrayList2.get(0);

        pargumenttailNode1 = new AArgumentTail(tcommaNode2, pvalueexpressionNode3);
        }
	nodeList.add(pargumenttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AIdentifierValueExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValueExpression pvalueexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvalueexpressionNode1 = new AIdentifierValueExpression(tidentifierNode2);
        }
	nodeList.add(pvalueexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ADecimalIntegerLiteralValueExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValueExpression pvalueexpressionNode1;
        {
            // Block
        PDecimalIntegerLiteral pdecimalintegerliteralNode2;
        pdecimalintegerliteralNode2 = (PDecimalIntegerLiteral)nodeArrayList1.get(0);

        pvalueexpressionNode1 = new ADecimalIntegerLiteralValueExpression(pdecimalintegerliteralNode2);
        }
	nodeList.add(pvalueexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AStringLiteralValueExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValueExpression pvalueexpressionNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalueexpressionNode1 = new AStringLiteralValueExpression(tstringliteralNode2);
        }
	nodeList.add(pvalueexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ADecimalIntegerLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDecimalIntegerLiteral pdecimalintegerliteralNode1;
        {
            // Block
        TDecimalNumeral tdecimalnumeralNode2;
        tdecimalnumeralNode2 = (TDecimalNumeral)nodeArrayList1.get(0);

        pdecimalintegerliteralNode1 = new ADecimalIntegerLiteral(tdecimalnumeralNode2);
        }
	nodeList.add(pdecimalintegerliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ATerminal$StatementSequenceTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatementSequenceTail pstatementsequencetailNode1;
        pstatementsequencetailNode1 = (PStatementSequenceTail)nodeArrayList1.get(0);
	if(pstatementsequencetailNode1 != null)
	{
	  listNode2.add(pstatementsequencetailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ANonTerminal$StatementSequenceTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatementSequenceTail pstatementsequencetailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementsequencetailNode2 = (PStatementSequenceTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementsequencetailNode2 != null)
	{
	  listNode3.add(pstatementsequencetailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ATerminal$ArgumentTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PArgumentTail pargumenttailNode1;
        pargumenttailNode1 = (PArgumentTail)nodeArrayList1.get(0);
	if(pargumenttailNode1 != null)
	{
	  listNode2.add(pargumenttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ANonTerminal$ArgumentTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PArgumentTail pargumenttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumenttailNode2 = (PArgumentTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumenttailNode2 != null)
	{
	  listNode3.add(pargumenttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 6}, {5, SHIFT, 1}, {6, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 10}, {2, SHIFT, 11}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 4}, {8, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {4, SHIFT, 12}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 10}, {1, SHIFT, 13}, {5, SHIFT, 1}, {6, SHIFT, 14}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 6}, {5, SHIFT, 1}, {6, SHIFT, 17}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 6}, {5, SHIFT, 1}, {6, SHIFT, 2}, {7, SHIFT, 3}, {8, REDUCE, 1}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 15}, {1, SHIFT, 22}, },
			{{-1, REDUCE, 10}, {3, SHIFT, 23}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 20}, {4, SHIFT, 26}, },
			{{-1, REDUCE, 6}, {5, SHIFT, 1}, {6, SHIFT, 2}, {7, SHIFT, 3}, {8, REDUCE, 2}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 23}, {5, SHIFT, 1}, {6, SHIFT, 14}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 11}, {3, SHIFT, 23}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 20}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, },
			{{-1, 19}, {21, 27}, },
			{{-1, 20}, {0, 6}, },
			{{-1, 7}, {11, 18}, },
			{{-1, 15}, },
			{{-1, 24}, {25, 29}, },
			{{-1, 8}, {10, 16}, {23, 28}, },
			{{-1, 9}, },
			{{-1, 21}, },
			{{-1, 25}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ';', decimal numeral, identifier, string literal",
			"expecting: ')', ',', ';'",
			"expecting: '(', eq, ';'",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: ')', decimal numeral, identifier, string literal",
			"expecting: ';', decimal numeral, identifier, string literal, EOF",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: '(', ';'",
			"expecting: decimal numeral, identifier, string literal",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 3, 3, 4, 4, 4, 1, 5, 0, 6, 4, 7, 8, 7, 9, 4, 6, 4, 6, 4, 10, 7, 7, 6, 6, 7, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
