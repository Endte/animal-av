/* This file was generated by SableCC (http://www.sablecc.org/). */

package extras.lifecycle.script.generated.node;

import extras.lifecycle.script.generated.node.ADecimalIntegerLiteral;
import extras.lifecycle.script.generated.node.Node;
import extras.lifecycle.script.generated.node.PDecimalIntegerLiteral;
import extras.lifecycle.script.generated.node.Switch;
import extras.lifecycle.script.generated.node.TDecimalNumeral;
import extras.lifecycle.script.generated.analysis.*;

@SuppressWarnings("nls")
public final class ADecimalIntegerLiteral extends PDecimalIntegerLiteral
{
    private TDecimalNumeral _decimalNumeral_;

    public ADecimalIntegerLiteral()
    {
        // Constructor
    }

    public ADecimalIntegerLiteral(
        @SuppressWarnings("hiding") TDecimalNumeral _decimalNumeral_)
    {
        // Constructor
        setDecimalNumeral(_decimalNumeral_);

    }

    @Override
    public Object clone()
    {
        return new ADecimalIntegerLiteral(
            cloneNode(this._decimalNumeral_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecimalIntegerLiteral(this);
    }

    public TDecimalNumeral getDecimalNumeral()
    {
        return this._decimalNumeral_;
    }

    public void setDecimalNumeral(TDecimalNumeral node)
    {
        if(this._decimalNumeral_ != null)
        {
            this._decimalNumeral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decimalNumeral_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._decimalNumeral_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._decimalNumeral_ == child)
        {
            this._decimalNumeral_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._decimalNumeral_ == oldChild)
        {
            setDecimalNumeral((TDecimalNumeral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
