/* This file was generated by SableCC (http://www.sablecc.org/). */

package extras.lifecycle.script.generated.node;

import extras.lifecycle.script.generated.node.ADecimalIntegerLiteralValueExpression;
import extras.lifecycle.script.generated.node.Node;
import extras.lifecycle.script.generated.node.PDecimalIntegerLiteral;
import extras.lifecycle.script.generated.node.PValueExpression;
import extras.lifecycle.script.generated.node.Switch;
import extras.lifecycle.script.generated.analysis.*;

@SuppressWarnings("nls")
public final class ADecimalIntegerLiteralValueExpression extends PValueExpression
{
    private PDecimalIntegerLiteral _decimalIntegerLiteral_;

    public ADecimalIntegerLiteralValueExpression()
    {
        // Constructor
    }

    public ADecimalIntegerLiteralValueExpression(
        @SuppressWarnings("hiding") PDecimalIntegerLiteral _decimalIntegerLiteral_)
    {
        // Constructor
        setDecimalIntegerLiteral(_decimalIntegerLiteral_);

    }

    @Override
    public Object clone()
    {
        return new ADecimalIntegerLiteralValueExpression(
            cloneNode(this._decimalIntegerLiteral_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecimalIntegerLiteralValueExpression(this);
    }

    public PDecimalIntegerLiteral getDecimalIntegerLiteral()
    {
        return this._decimalIntegerLiteral_;
    }

    public void setDecimalIntegerLiteral(PDecimalIntegerLiteral node)
    {
        if(this._decimalIntegerLiteral_ != null)
        {
            this._decimalIntegerLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decimalIntegerLiteral_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._decimalIntegerLiteral_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._decimalIntegerLiteral_ == child)
        {
            this._decimalIntegerLiteral_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._decimalIntegerLiteral_ == oldChild)
        {
            setDecimalIntegerLiteral((PDecimalIntegerLiteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
