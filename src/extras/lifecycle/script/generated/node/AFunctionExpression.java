/* This file was generated by SableCC (http://www.sablecc.org/). */

package extras.lifecycle.script.generated.node;

import extras.lifecycle.script.generated.node.AFunctionExpression;
import extras.lifecycle.script.generated.node.Node;
import extras.lifecycle.script.generated.node.PArgument;
import extras.lifecycle.script.generated.node.PExpression;
import extras.lifecycle.script.generated.node.Switch;
import extras.lifecycle.script.generated.node.TIdentifier;
import extras.lifecycle.script.generated.node.TLeftParenthesis;
import extras.lifecycle.script.generated.node.TRightParenthesis;
import extras.lifecycle.script.generated.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionExpression extends PExpression
{
    private TIdentifier _id_;
    private TLeftParenthesis _leftParenthesis_;
    private PArgument _args_;
    private TRightParenthesis _rightParenthesis_;

    public AFunctionExpression()
    {
        // Constructor
    }

    public AFunctionExpression(
        @SuppressWarnings("hiding") TIdentifier _id_,
        @SuppressWarnings("hiding") TLeftParenthesis _leftParenthesis_,
        @SuppressWarnings("hiding") PArgument _args_,
        @SuppressWarnings("hiding") TRightParenthesis _rightParenthesis_)
    {
        // Constructor
        setId(_id_);

        setLeftParenthesis(_leftParenthesis_);

        setArgs(_args_);

        setRightParenthesis(_rightParenthesis_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionExpression(
            cloneNode(this._id_),
            cloneNode(this._leftParenthesis_),
            cloneNode(this._args_),
            cloneNode(this._rightParenthesis_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionExpression(this);
    }

    public TIdentifier getId()
    {
        return this._id_;
    }

    public void setId(TIdentifier node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLeftParenthesis getLeftParenthesis()
    {
        return this._leftParenthesis_;
    }

    public void setLeftParenthesis(TLeftParenthesis node)
    {
        if(this._leftParenthesis_ != null)
        {
            this._leftParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParenthesis_ = node;
    }

    public PArgument getArgs()
    {
        return this._args_;
    }

    public void setArgs(PArgument node)
    {
        if(this._args_ != null)
        {
            this._args_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._args_ = node;
    }

    public TRightParenthesis getRightParenthesis()
    {
        return this._rightParenthesis_;
    }

    public void setRightParenthesis(TRightParenthesis node)
    {
        if(this._rightParenthesis_ != null)
        {
            this._rightParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParenthesis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._leftParenthesis_)
            + toString(this._args_)
            + toString(this._rightParenthesis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._leftParenthesis_ == child)
        {
            this._leftParenthesis_ = null;
            return;
        }

        if(this._args_ == child)
        {
            this._args_ = null;
            return;
        }

        if(this._rightParenthesis_ == child)
        {
            this._rightParenthesis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TIdentifier) newChild);
            return;
        }

        if(this._leftParenthesis_ == oldChild)
        {
            setLeftParenthesis((TLeftParenthesis) newChild);
            return;
        }

        if(this._args_ == oldChild)
        {
            setArgs((PArgument) newChild);
            return;
        }

        if(this._rightParenthesis_ == oldChild)
        {
            setRightParenthesis((TRightParenthesis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
