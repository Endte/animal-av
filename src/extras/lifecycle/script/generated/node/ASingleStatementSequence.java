/* This file was generated by SableCC (http://www.sablecc.org/). */

package extras.lifecycle.script.generated.node;

import java.util.*;

import extras.lifecycle.script.generated.node.ASingleStatementSequence;
import extras.lifecycle.script.generated.node.Node;
import extras.lifecycle.script.generated.node.PStatement;
import extras.lifecycle.script.generated.node.PStatementSequence;
import extras.lifecycle.script.generated.node.PStatementSequenceTail;
import extras.lifecycle.script.generated.node.Switch;
import extras.lifecycle.script.generated.node.TSemicolon;
import extras.lifecycle.script.generated.analysis.*;

@SuppressWarnings("nls")
public final class ASingleStatementSequence extends PStatementSequence
{
    private PStatement _statement_;
    private TSemicolon _semicolon_;
    private final LinkedList<PStatementSequenceTail> _statementSequenceTail_ = new LinkedList<PStatementSequenceTail>();

    public ASingleStatementSequence()
    {
        // Constructor
    }

    public ASingleStatementSequence(
        @SuppressWarnings("hiding") PStatement _statement_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_,
        @SuppressWarnings("hiding") List<PStatementSequenceTail> _statementSequenceTail_)
    {
        // Constructor
        setStatement(_statement_);

        setSemicolon(_semicolon_);

        setStatementSequenceTail(_statementSequenceTail_);

    }

    @Override
    public Object clone()
    {
        return new ASingleStatementSequence(
            cloneNode(this._statement_),
            cloneNode(this._semicolon_),
            cloneList(this._statementSequenceTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleStatementSequence(this);
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    public LinkedList<PStatementSequenceTail> getStatementSequenceTail()
    {
        return this._statementSequenceTail_;
    }

    public void setStatementSequenceTail(List<PStatementSequenceTail> list)
    {
        this._statementSequenceTail_.clear();
        this._statementSequenceTail_.addAll(list);
        for(PStatementSequenceTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._statement_)
            + toString(this._semicolon_)
            + toString(this._statementSequenceTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        if(this._statementSequenceTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        for(ListIterator<PStatementSequenceTail> i = this._statementSequenceTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatementSequenceTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
