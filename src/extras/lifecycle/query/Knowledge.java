package extras.lifecycle.query;

import java.util.List;
import java.util.Map;

import extras.lifecycle.query.EvaluationMode;

import extras.lifecycle.checkpoint.Checkpoint;
import extras.lifecycle.checkpoint.CheckpointedEvent;
import extras.lifecycle.common.PropertiesBean;

/**
 * This is a dynamic information container. It is used by evaluation of a <code>Record</code> or a
 * <code>Predicate</code>. Every <code>Box</code> has a read and write access to this object
 * and can use it to dynamically add data, set flags and process information to other Boxes.
 * 
 * @author Mihail Mihaylov
 * @see extras.lifecycle.query.workflow.Box
 */
public class Knowledge {
	
	/**
	 * This is a container of variables.
	 */
	private PropertiesBean variables;
	
	/**
	 * List of checkpoints.
	 */
	private List<Checkpoint> checkpoints;
	
	/**
	 * List of all events.
	 */
	private Map<String, List<CheckpointedEvent>> events;
	
	/**
	 * Flag, which defines if a decision is taken by the evaluating algorithm.
	 */
	private boolean decisionMade;
	
	/**
	 * Flag, which shows if the evaluating algorithm is over with a positive result.
	 */
	private boolean success;
	
	/**
	 * Buffer, which holds some comments, generated by running the evaluation.
	 */
	private StringBuffer commentBuf;
	
	/**
	 * The mode in which the evaluation is executed.
	 */
	private EvaluationMode evaluationMode;
	
	/**
	 * Data, which is returned as a result of the query.
	 */
	private Object resultData;
	
	/**
	 * Construct a knowledge object, with initial variables and list of checkpoint.
	 * @param variables which will be adopted
	 * @param checkpoints the initial checkpoints
	 */
	public Knowledge(PropertiesBean variables, List<Checkpoint> checkpoints, Map<String, List<CheckpointedEvent>> events) {
		super();
		this.variables = variables;
		this.checkpoints = checkpoints;
		this.events = events;
		this.commentBuf = new StringBuffer();
	}

	/**
	 * @return the variables
	 */
	public PropertiesBean getVariables() {
		return variables;
	}

	/**
	 * @param variables the variables to set
	 */
	public void setVariables(PropertiesBean variables) {
		this.variables = variables;
	}

	/**
	 * @return the checkpoints
	 */
	public List<Checkpoint> getCheckpoints() {
		return checkpoints;
	}

	/**
	 * @param checkpoints the checkpoints to set
	 */
	public void setCheckpoints(List<Checkpoint> checkpoints) {
		this.checkpoints = checkpoints;
	}


	/**
	 * @return the decisionMade
	 */
	public boolean isDecisionMade() {
		return decisionMade;
	}

	/**
	 * @param decisionMade the decisionMade to set
	 */
	public void setDecisionMade(boolean decisionMade) {
		this.decisionMade = decisionMade;
	}

	/**
	 * @return the success
	 */
	public boolean isSuccess() {
		return success;
	}

	/**
	 * @param success the success to set
	 */
	public void setSuccess(boolean success) {
		this.success = success;
		decisionMade = true;
	}
	
	/**
	 * Gets the comment, which is till this point written.
	 * @return the comment as <code>String</code>
	 */
	public String getComment() {
		return commentBuf.toString();
	}
	
	/**
	 * Add comment to the <code>Knowledge</code>. 
	 *  
	 * @param comment as String
	 */
	public void addComment(String comment) {
		if (comment != null)
			commentBuf.append(comment + "\n");
	}
	
	/**
	 * Add warning to the <code>Knowledge</code>. 
	 *  
	 * @param comment as String
	 */
	public void addWarning(String comment) {
		addComment("! " + comment);
	}
	
	/**
	 * Add error to the <code>Knowledge</code>. 
	 *  
	 * @param comment as String
	 */
	public void addError(String comment) {
		addComment("!!! " + comment);
	}

	/**
	 * @return the events
	 */
	public Map<String, List<CheckpointedEvent>> getEvents() {
		return events;
	}

	/**
	 * @param events the events to set
	 */
	public void setEvents(Map<String, List<CheckpointedEvent>> events) {
		this.events = events;
	}

	/**
	 * @return the mode
	 */
	public EvaluationMode getEvaluationMode() {
		return evaluationMode;
	}

	/**
	 * @param mode the mode to set
	 */
	public void setEvaluationMode(EvaluationMode mode) {
		this.evaluationMode = mode;
	}

	/**
	 * @return the resultData
	 */
	public Object getResultData() {
		return resultData;
	}

	/**
	 * @param resultData the resultData to set
	 */
	public void setResultData(Object resultData) {
		this.resultData = resultData;
	}
	
	

}
