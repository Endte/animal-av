package animalscript.extensions;

import java.io.IOException;
import java.util.Hashtable;

import animal.misc.ParseSupport;
import animal.misc.XProperties;
import animalscript.core.AnimalParseSupport;
import animalscript.core.AnimalScriptInterface;
import animalscript.core.BasicParser;

/**
 * This class provides an import filter for AnimalScript array commands
 * 
 * @author <a href="mailto:roessling@acm.org">Guido R&ouml;&szlig;ling</a>
 * @version 1.0 2000-03-21
 */
public class MethodInvocationSupport extends BasicParser implements
		AnimalScriptInterface {
	// ========================= attributes =========================
	private MethodInvocationProducer methodInvocationProducer;

	/**
	 * instantiates the key class dispatcher mapping keyword to definition type
	 */
	public MethodInvocationSupport() {
		handledKeywords = new Hashtable<String, Object>();
		rulesHash = new XProperties();
		handledKeywords.put("createobject", "parseCreateObjectInput");

		handledKeywords.put("invokemethod", "parseMethodInvocationInput");
		handledKeywords.put("invokegeneration", "parseCodeGenerationInput");
		methodInvocationProducer = new MethodInvocationProducer();
	}

	// ===================================================================
	// interface methods
	// ===================================================================

	/**
	 * Determine depending on the command passed if a new step is needed Also keep
	 * in mind that we might be in a grouped step using the {...} form. Usually,
	 * every command not inside such a grouped step is contained in a new step.
	 * However, this is not the case for operations without visible effect -
	 * mostly maintenance or declaration entries.
	 * 
	 * @param currentCommand
	 *          the command used for the decision.
	 * @return true if a new step must be generated
	 */
	public boolean generateNewStep(String currentCommand) {
		return !sameStep; // !sameStep || !currentCommand.equalsIgnoreCase("arrayswap");
	}

	// ===================================================================
	// Animator parsing routines
	// ===================================================================

	/**
	 * Create a array from the description read from the StreamTokenizer. The
	 * description is usually generated by other programs and dumped in a file or
	 * on System.out.
	 */
	public XProperties parseCreateObjectInput() throws IOException {
		// read in object type
		String localType = ParseSupport.parseWord(stok, "create object type")
				.toLowerCase();

		// read in OID(object name)
		String objectName = AnimalParseSupport.parseText(stok,
				"name of created object");

		// a helper to prevent too many String operations
		String basicFeedbackTag = localType + " '" + objectName + "' ";

		// Parse deprecated array tag
		ParseSupport.parseWord(stok, basicFeedbackTag + " 'class'", "class");
		String targetClass = AnimalParseSupport.parseText(stok,
				"MethodInvocation class name");

		System.err.println("store object '" + objectName + "' of type "
				+ targetClass);
		boolean invokeNow = ParseSupport.parseOptionalWord(stok,
				"create object keyword 'onLoad'", "onLoad");
		MethodInvocationProducer.createObject(objectName, targetClass, invokeNow);
		return new XProperties();
	}

	/**
	 * Create a array from the description read from the StreamTokenizer. The
	 * description is usually generated by other programs and dumped in a file or
	 * on System.out.
	 */
	public XProperties parseMethodInvocationInput() throws IOException {
		// read in object type
		String localType = ParseSupport.parseWord(stok, "method invocation type")
				.toLowerCase();

		// read in OID(object name)
		String methodName = AnimalParseSupport.parseText(stok,
				"method invocation object name");

		// a helper to prevent too many String operations
		String basicFeedbackTag = localType + " '" + methodName + "' ";

		// Parse deprecated array tag
		ParseSupport.parseWord(stok, basicFeedbackTag + "  'on'", "on");
		String targetObject = AnimalParseSupport.parseText(stok,
				"method invocation class name");

		boolean invokeNow = ParseSupport.parseOptionalWord(stok,
				"method invocation keyword 'onLoad'", "onLoad");
		methodInvocationProducer.invokeMethod(methodName, targetObject, invokeNow);
		return new XProperties();
	}

	/**
	 * Create a array from the description read from the StreamTokenizer. The
	 * description is usually generated by other programs and dumped in a file or
	 * on System.out.
	 */
	public XProperties parseCodeGenerationInput() throws IOException {
		// read in object type
		ParseSupport.parseWord(stok, "method invocation type");

		// Parse deprecated array tag
		ParseSupport.parseWord(stok, "code generation 'on'", "on");

		// read in OID(object name)
		String targetObject = AnimalParseSupport.parseText(stok,
				"method invocation object name");

		int tag = 0;
		if (ParseSupport.parseOptionalWord(stok, "'param'", "param"))
			tag = ParseSupport.parseInt(stok, "param value");

		boolean invokeNow = ParseSupport.parseOptionalWord(stok,
				"method invocation keyword 'onLoad'", "onLoad");
		methodInvocationProducer.getScriptingCode(targetObject, tag, invokeNow);
		return null;
	}
}
