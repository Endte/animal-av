/*
 * AbstractCongestionClient.java
 * Felix Gail, Torben Carstens, 2018 for the Animal project at TU Darmstadt.
 * Copying this file for educational purposes is permitted without further authorization.
 */
package generators.network.congestioncontrol.helper;

import algoanim.primitives.Rect;
import algoanim.primitives.generators.RectGenerator;
import algoanim.properties.AnimationPropertiesKeys;
import algoanim.properties.RectProperties;
import algoanim.util.Coordinates;
import algoanim.util.MsTiming;

import java.awt.*;
import java.util.LinkedList;
import java.util.List;

enum ClientColor {
    RED(new Color(255, 73, 95)),
    BLUE(Color.BLUE),
    YELLOW(Color.YELLOW),
    ORANGE(new Color(137, 100, 27)),
    GREEN(Color.GREEN),
    MAGENTA(Color.MAGENTA),
    LIGHT_GRAY(new Color(124, 124, 124)),
    CYAN(Color.CYAN),
    GRAY(Color.DARK_GRAY),
    PINK(Color.PINK);

    private Color color;

    ClientColor(Color color) {
        this.color = color;
    }

    Color getColor() {
        return color;
    }
}

class CongestionControlClient extends Rect {
    static final int SIZE = 50;
    private int id;
    private int packetId;
    private LinkedList<CongestionControlPacket> packets;
    private RectGenerator generator;
    private boolean forceGeneration = false;
    private final Coordinates fifoCoordinate;

    CongestionControlClient(int id, RectGenerator generator, Coordinates upperLeft, Coordinates lowerRight, RectProperties properties, Coordinates fifoUpperLeftCoordinate) {
        super(generator, upperLeft, lowerRight, "client_" + id, new MsTiming(0), properties);
        this.generator = generator;
        this.id = id;
        packets = new LinkedList<CongestionControlPacket>();
        this.fifoCoordinate = fifoUpperLeftCoordinate;
    }

    // @return CongestionControlPacket in case one should be generated by the client
    void update() {
        updatePackets();
    }

    void updatePackets() {
        for (CongestionControlPacket packet : packets) {
            packet.update();
        }
    }

    List<CongestionControlPacket> getPackets() {
        return packets;
    }

    CongestionControlPacket generatePacket() {
        int margin = 10;
        Coordinates upperLeft = new Coordinates(
                ((Coordinates) getLowerRight()).getX() - SIZE / 2 - CongestionControlPacket.WIDTH / 2,
                ((Coordinates) getLowerRight()).getY() + margin
        );
        Coordinates lowerRight = new Coordinates(
                upperLeft.getX() + CongestionControlPacket.WIDTH,
                upperLeft.getY() + CongestionControlPacket.HEIGHT
        );

        CongestionControlPacket packet = new CongestionControlPacket(generator, upperLeft, lowerRight, getProperties(), this);
        packets.add(packet);

        return packet;
    }

    Color getColor() {
        return (Color) getProperties().get(AnimationPropertiesKeys.FILL_PROPERTY);
    }

    public Coordinates getFifoCoordinates() {
        return fifoCoordinate;
    }
}
