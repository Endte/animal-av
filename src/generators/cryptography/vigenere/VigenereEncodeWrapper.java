/*
 * Created on 28.09.2005 by Guido Roessling (roessling@acm.org>
 */
package generators.cryptography.vigenere;

import generators.framework.Generator;
import generators.framework.GeneratorType;
import generators.framework.properties.AnimationPropertiesContainer;

import java.io.StringWriter;
import java.util.Hashtable;
import java.util.Locale;

import de.ahrgr.animal.kohnert.generators.VigenereEncode2;

public class VigenereEncodeWrapper implements Generator {

  private static final String DESCRIPTION =
    "Die Vigenere-Verschlüsselung ist ein Algorithmus zur" 
    +"Verschlüsselung eines gegebenen Textes mit einem Schlüsselwort. "
    +"Dabei wird zunächst das Schlüsselwort solange unter den Text "
    +"geschrieben, bis jedem Zeichen des Textes ein Zeichen des "
    +"Schlüsselwort zugeteilt wurde. Das Schlüsselwort sollte dabei "
    +"nicht zu kurz sein, um eine sinnvolle Codierung zu erreichen."
    +"\nDas Verfahren baut dazu eine Tabelle der Größe n*m auf, wobei "
    +"n für die Anzahl Zeichen im zu Grunde liegenden Alphabet und m "
    +"die Länge des vom Nutzer gewählten Schlüsselworts ist."
    +"\nIn die erste Spalte der Tabelle wird das Schlüsselwort geschrieben."
    +"Alle Zeilen werden dann mit dem Alphabet, beginnend mit dem Zeichen "
    +"des Schlüsselworts in der ersten Spalte der Zeile, aufgefüllt."
    +"\nUm ein Zeichen zu verschlüsseln, wird nun der Code der Tabelle in "
    +"der Zeile (Zeichencode der Kopie des Schlüsselworts unter der Eingabe) "
    +"und der Spalte (Zeichencode der Eingabe) ausgegeben.";
  
  private GeneratorType myType = new GeneratorType(
      GeneratorType.GENERATOR_TYPE_CRYPT);

  public GeneratorType getGeneratorType() {
    return myType;
  }

  public String getName() {
    return "Vigenere-Verschlüsselung";
  }

  public String getDescription() {
    return DESCRIPTION;
  }

  public String getCodeExample() {
    return "TBD";
  }

  /**
   * getFileExtension returns the Extension for the file that is generated by
   * this Generator. This should be "asu" (animal-script-uncompressed), "asc"
   * (animal-script-compressed), "ama" (animal-ascii-uncompressed), "aml"
   * (animal-ascii-compressed), "tex", "txt", "pdf", ...
   * 
   * @return The Extension for the file that is generated by this Generator.
   */
  public String getFileExtension() {
    return Generator.ANIMALSCRIPT_FORMAT_EXTENSION;
  }

  private Hashtable<String, Object> provideMappedProperties(
  		AnimationPropertiesContainer props,
      Hashtable<String, Object> primitives) {
    Hashtable<String, Object> mapper = new Hashtable<String, Object>(59);
    mapper.put("stringToEncode", primitives.get("stringToEncode"));
    mapper.put("key", primitives.get("key"));
    mapper.put("encodeLabel", primitives.get("encodeLabel"));
    mapper.put("keyLabel", primitives.get("keyLabel"));
    mapper.put("repeatedCopyLabel", primitives.get("repeatedCopyLabel"));
    mapper.put("charSet", primitives.get("charSet"));
    mapper.put("title", "Vigenere Encryption");
    mapper.put("tableCreateLabel", primitives.get("tableCreateLabel"));
    mapper.put("firstRowLabel", primitives.get("firstRowLabel"));
    mapper.put("fillContinuousLabel", primitives.get("fillContinuousLabel"));
    mapper.put("codePosLabel", primitives.get("codePosLabel"));
    mapper.put("numberSteps", primitives.get("numberSteps (0=alle)"));
    mapper.put("codeColor", props.get("code", "color"));
    mapper.put("codeFont", props.get("code", "font"));
    mapper.put("titleColor", primitives.get(	"titlecolor"));
//    mapper.put("titleColor", props.get("title", "color"));
    mapper.put("titleFont", props.get("title", "font"));
    mapper.put("tableRowColor", props.get("tableRow", "color"));
    mapper.put("tableColumnColor", props.get("tableColumn", "color"));
    mapper.put("tableFillColor", props.get("tableFill", "color"));
    mapper.put("resultColor", props.get("result", "color"));
    return mapper;
  }

  public String generate(AnimationPropertiesContainer props,
      Hashtable<String, Object> primitives) {
    Hashtable<String, Object> mapper = provideMappedProperties(props, primitives);
    VigenereEncode2 encoder = new VigenereEncode2(mapper);
    StringWriter myWriter = new StringWriter();
    encoder.generate(myWriter);
    return myWriter.toString();
  }
  
  
	/**
	 * getContentLocale returns the target Locale of the generated output
	 * Use e.g. Locale.US for English content, Locale.GERMANY for German, etc.
	 * 
	 * @return a Locale instance that describes the content type of the output
	 */
	public Locale getContentLocale() {
		return Locale.GERMANY;
	}

    public String getOutputLanguage() {
      return Generator.JAVA_OUTPUT;
    }

    public String getAnimationAuthor() {
      return "Eike Kohnert";
    }

    public String getAlgorithmName() {
      return "Vigen\u00e8re-Verschl\u00fcsselung";
    }
    public void init() {
      // nothing to be done here
    }

}