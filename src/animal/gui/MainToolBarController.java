/*
 * Created on 14.07.2004
 *
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
package animal.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import animal.exchange.AnimationExporter;
import animal.exchange.AnimationImporter;
import animal.exchange.AnimationPrintJob;
import animal.main.Animal;
import animal.main.Animation;
import animal.main.AnimationWindow;
import animal.misc.MessageDisplay;

/**
 * @author guido
 *
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
public class MainToolBarController implements ActionListener {

  /**
   * The animal instance of which we will be working!
   */
  private Animal animal;
  
  /**
   * creates a new main tool bar controller
   * 
   * @param animalInstance the current instance of Animal
   */
  public MainToolBarController(Animal animalInstance) {
    super();
    
    // store the reference to the Animal instance!
    animal = animalInstance;
  }

  
  /**
   * handles user events generated by interactions with the tool bar elements
   * 
   * @param event the ActionEvent generated by the user interaction
   */
  public void actionPerformed(ActionEvent event) {
    // make sure the Animal reference exists!
    if (animal == null)
      animal = Animal.get();
    
    String command = event.getActionCommand();
    if (command.equals(MainToolBar.INPUT)) {
      AnimalScriptInputWindow siw = animal.getScriptInputWindow();
      siw.setVisible(true);
    }
    else if (MainToolBar.NEW.equals(command))
      animal.newFile();
    else if (MainToolBar.OPEN.equals(command))
      AnimationImporter.importAnimation();
    else if (MainToolBar.REPOSITORY.equals(command))
      animal.openRepository();
    else if (MainToolBar.RELOAD.equals(command))
      animal.reloadFile();
    else if (MainToolBar.INPUT.equals(command)) {
        // do nothing
    }else if (MainToolBar.CLEAR.equals(command)) {
      AnimalMainWindow.getOutputArea().setText(null);
    }else if (MainToolBar.UHookPlayer.equals(command)) {
      AnimalMainWindow.getWindowCoordinator()
      .getAnimationWindow(false).setAnimationPlayerHooked(!AnimalMainWindow.getWindowCoordinator()
      .getAnimationWindow(false).isAnimationPlayerHooked());
    }
    else if (MainToolBar.PRINT.equals(command))
      new AnimationPrintJob(animal);
    else if (MainToolBar.RUN_ANIMATION.equals(command)
        || MainToolBar.SHOW_ANIMATION_WINDOW.equals(command)) {
      AnimationWindow animWin = 
        AnimalMainWindow.getWindowCoordinator().getAnimationWindow(true);
      animWin.setVisible(true);
      animWin.startOfAnimation();
    }
    else if (MainToolBar.SHOW_DRAWING_WINDOW.equals(command)) {
      DrawWindow drawWin = 
        AnimalMainWindow.getWindowCoordinator().getDrawWindow(true);
      drawWin.setVisible(true);
    }
    else if (MainToolBar.SAVE.equals(command)) {
      Animation currentAnimation = animal.getAnimation();
      if (currentAnimation != null)
        AnimationExporter.saveAnimation(currentAnimation);
    }
    else if (MainToolBar.SAVE_AS.equals(command)) {
      Animation currentAnimation = animal.getAnimation();
      if (currentAnimation != null)
        AnimationExporter.exportAnimation(currentAnimation);
    } else if (MainToolBar.ZOOM_IN.equals(command)) {

      animal.zoomIn();
    }

    else if (MainToolBar.ZOOM_OUT.equals(command)) {

      animal.zoomOUT();
    }else if (MainToolBar.PDF.equals(command)) {

      animal.hideMenu();
    }
    
    else 
      MessageDisplay.errorMsg("nothingAssoc", command, 
          MessageDisplay.RUN_ERROR);
  }
}