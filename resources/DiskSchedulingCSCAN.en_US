noSuchKeyException = There is no ressource for the key {0}
iconNotFound = Icon ”{0}” not found

algo1 = 1. Determine the initial diricetion of movement (it is descending if the current head position is smaller than the last request, otherwise ascending).
algo2 = 2. Sort the queue elements into:
algo3 = \t \t \t \t \t 1. a list which contains all elements less or equal and 
algo4 = \t \t \t \t \t 2. al list which contains all elements greatr than the current head position.
algo5 = 3. Sort the first list in descending order.
algo6 = 4. Sort the second list in ascending order.
algo7 = 5. If the movement is descending beginn with the first list, otherwise the second.
algo8 = 6. Move the disk arm to the position of the first request of the list you work with at first.
algo9 = 7. Should there be any requests left in this list move the disk arm to the position of the next request, 
algo10 = otherwise to position 0 if the movement is descending or in the other case to position 
algo11 = 8. Move the disk arm to the position of the first request of the list you work with next.
algo12 = 9. Should there be any requests left in this list move the disk arm to the position of the next request, otherwise terminate.
algo21 = 3. If the movement is descending sort both lists in descending order, otherwise both in ascending order.
algo22 = 4. If the movement is descending beginn with the first list, otherwise the second.
algo23 = 5. Move the disk arm to the position of the first request of the list you work with at first.
algo24 = 6. Should there be any requests left in this list move the disk arm to the position of the next request, 
algo25 = otherwise to position 0 if the movement is descending or in the other case to position 
algo26 = 7. Move the disk arm to the position of the first request of the list you work with next.
algoHeader = Algorithm
codeEg1 = SCAN Algorithm
codeEg2 = C-SCAN Algorithm
descr1 = This animation focuses on demonstrating how the SCAN algorithm in particular and its 
descr2 = cyclic variation work
eg1 = Disk with
eg2 = Cylinders
eg3 = Request Queue
eg4 = Current head position
eg5 = Last request
eg6 = Initial direction of movement
eg7 = ascending
eg8 = descending
eg9 = List less or equal
eg10 = List greater
exampleHeader = Example
exception = Please use only values between 0 and 
intermediate1 = A variation of the SCAN algorithm ensures that request are served in only one direction
intermediate2 = of movement. This means, if the disk arm arrives at one end of the disk it moves to the
intermediate3 = the other end without servicing any requests on the way.
intermediate4 = This variation is therefore called circular SCAN or in short C-SCAN.
intro1 = Disk scheduling algorithms determine the order in which arriving read or write requests
intro2 = are served and thus the movement of the disk arm and head.
intro3 = The SCAN algorithm (also called elevator algorithm) moves the disk arm either in 
intro4 = ascending or descending direction over the disk and services requests also in ascending
intro5 = or descending order on the way to one end of the disk.
intro6 = If the arm arrives there its direction of movement is inverted and the servicing
intro7 = continues in reverse order.
intro8 = The initial direction of movement of the disk arm is thereby determined by the last
intro9 = served request and the current position of the disk head.
introHeader = Introduction
name = Disk Scheduling: (C-)SCAN [EN]
outro1 = Due to the specific movement of the disk arm it is a common problem of the SCAN algorithm that arriving requests
outro2 = to cylinders that have been visited shortly before that by the disk arm have significant longer waiting times if more 
outro3 = and more further requests arrive which lay more conveniently on the way of the disk arm from one end of the disk to the other. 
outro4 = In addition are requests that lay in the mid range of the disk (again because of the specific movement of the disk arm)  
outro5 = highly privileged.
outro6 = The CSCAN algorithm on the other hand provides due to once the disk arm reaches one end of the disk it is not  servicing 
utro7 =  any requests on its way to the other end more balanced waiting times and more fairness regarding the frequency in which 
outro8 = the disk arm passes the cylinders and is able to serve requests there.
outroHeader = Conclusion
result2 = Covered Distance
variationHeader = Variation