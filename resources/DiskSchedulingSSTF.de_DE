noSuchKeyException = There is no ressource for the key {0}
iconNotFound = Icon ”{0}” not found

algo1 = 1. Suche das Element mit der kürzesten Distanz zur aktuellen Position des Kopfes.
algo2 = 2. Bewege den Diskarm zu dieser Position.
algo3 = 3. Sollten noch Elemente in der Queue sein, gehe zu Schritt 1, sonst terminiere. 
algoHeader = Algorithmus
codeEg1 = Beim Shortest Seek Time First Algorithmus wird immer die Anfrage als Nächste gewählt,
codeEg2 = die der aktuellen Position des Kopfes am nächsten ist
descr = Diese Animation zeigt im speziellen, wie der Shortest Seek Time First Algorithmus funktioniert
eg1 = Festplatte mit
eg2 = Zylindern
eg3 = Anfragen-Queue
eg4 = Aktuelle Position des Kopfes
exampleHeader = Beispiel
exception = Bitte verwenden Sie nur Werte zwischen 0 und 
intro1 = Disk Scheduling Algorithmen bestimmen die Reihenfolge in der eingegangene Lese- oder
intro2 = Schreibanfragen bearbeitet werden und somit die Bewegung des Festplattenarms und –kopfes.
intro3 = Beim Shortest Seek Time First Algorithmus wird dabei immer die Anfrage als Nächste gewählt,
intro4 = die der aktuellen Position des Kopfes am nächsten ist.
introHeader = Einleitung
name = Disk Scheduling: SSTF [DE]
outro1 = Der Shortest Seek Time First Algorithmus hat den großen Vorteil, dass er die Armbewegung im
outro2 = Vergleich zu anderen Algorithmen (z. B. der FIFO Methode) stark reduziert und dadurch eine
outro3 = kürzere durchschnittliche Antwortzeit bietet. Gleichzeitig ist er immer noch sehr einfach
outro4 = zu implementieren.
outro5 = Allerdings können sich die Zeiten für Anfragen, die am weitesten von der aktuellen
outro6 = Kopfposition entfernt sind, durch hinzukommende näherliegende Anfragen stark verlängern.
outro7 = Im schlimmsten Fall kann es hier sogar zu Starvation kommen, sodass die am weitesten
outro8 = entfernte Anfrage nie bearbeitet wird.
outroHeader = Fazit
result2 = Zurückgelegte Distanz