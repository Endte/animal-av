noSuchKeyException = There is no ressource for the key {0}
iconNotFound = Icon ”{0}” not found

algo1 = 1. Select the elemet with the shortest distance to the current head position.
algo2 = 2. Move the disk arm to ths position.
algo3 = 3. Should any elements be left in the queue go to step 1, otherwise terminate.
algoHeader = Algorithm 
codeEg1 = The shortest seek time first algorithm schedules the requests so that the next served 
codeEg2 = request is always the one nearest to the current disk head position
descr = This animiation demonstrates how the shortest sekk time first algorithm in particular works
eg1 = Disk with
eg2 = Cylinders
eg3 = Request Queue
eg4 = Current head position
exampleHeader = Example
exception = Please use only values between 0 and
intro1 = Disk scheduling algorithms determine the order in which arriving read or write requests
intro2 = are served and thus the movement of the disk arm and head.
intro3 = The shortest seek time first algorithm schedules the requests so that the next served 
intro4 = request is always the one nearest to the current disk head position.
introHeader = Introduction
name = Disk Scheduling: SSTF [EN]
outro1 = The shortest seek time first algorithm has the advantage that it greatly reduces the movement 
outro2 = of the disk arm compared to other disk scheduling algorithms like the FIFO method and is
outro3 = therefore able to offer a shorter average response time. At the same time it is fairly easy
outro4 = to implement.
outro5 = On the other hand it is possible that the service time for requests that are farthest from 
outro6 = the current disk head position could be extended due to added requests which are closer.
outro7 = In the worst case scenario starvation could occur meaning that the farthermost request would
outro8 = never be served.
outroHeader = Conclusion
result2 = Covered Distance