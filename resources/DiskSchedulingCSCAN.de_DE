noSuchKeyException = There is no ressource for the key {0}
iconNotFound = Icon ”{0}” not found

algo1 = 1. Bestimme die initiale Bewegungsrichtung (ist die aktuelle Kopfposition kleiner als die letzte Anfrage ist sie absteigend, sonst aufsteigend).
algo2 = 2. Sortiere die Elemente der Queue in:
algo3 = \t \t \t \t \t 1. eine Liste mit allen Elementen kleiner oder gleich und 
algo4 = \t \t \t \t \t 2. eine Liste mit allen Elementen größer als die aktuelle Kopfposition.
algo5 = 3. Sortiere die erste Liste absteigend.
algo6 = 4. Sortiere die zweite Liste aufsteigend.
algo7 = 5. Beginne bei absteigender Bewegungsrichtung mit der ersten Liste, sonst mit der zweiten.
algo8 = 6. Bewege den Diskarm zur Position der ersten Anfrage der zuerst zu bearbeitenden Liste.
algo9 = 7. Sollten noch weitere Elemente in dieser Liste sein bewege den Diskarm zur Position der nächsten Anfrage, 
algo10 = sonst bei absteigender Bewegungsrichtung zur Position 0 bzw. bei aufsteigender Bewegungsrichtung zur Position
algo11 = 8. Bewege den Diskarm zur Position der ersten Anfrage der als zweites zu bearbeitenden Liste.
algo12 = 9. Sollten noch weitere Elemente in dieser Liste sein bewege den Diskarm zur Position der nächsten Anfrage, sonst terminiere.
algo21 = 3. Sortiere beide Listen absteigend bei absteigender Bewegungsrichtung, sonst beide aufsteigend.
algo22 = 4. Beginne bei absteigender Bewegungsrichtung mit der ersten Liste, sonst mit der zweiten.
algo23 = 5. Bewege den Diskarm zur Position der ersten Anfrage der zuerst zu bearbeitenden Liste.
algo24 = 6. Sollten noch weitere Elemente in dieser Liste sein bewege den Diskarm zur Position der nächsten Anfrage, 
algo25 = sonst bei absteigender Bewegungsrichtung zur Position 0 bzw. bei aufsteigender Bewegungsrichtung zur Position
algo26 = 7. Bewege den Diskarm zum anderen Ende der Disk ohne dabei Anfragen zu bearbeiten.
algoHeader = Algorithmus
codeEg1 = SCAN Algorithmus
codeEg2 = C-SCAN Algorithmus
descr1 = Diese Animation zeigt im speziellen, wie der CSCAN Algorithmus und seine 
descr2 = zyklische Variante funktionieren
eg1 = Festplatte mit
eg2 = Zylindern
eg3 = Anfragen-Queue
eg4 = Aktuelle Position des Kopfes
eg5 = Letzte Anfrage
eg6 = Initiale Bewegungsrichtung
eg7 = absteigend
eg8 = aufsteigend
eg9 = Liste kleiner oder gleich
eg10 = Liste größer
exampleHeader = Beispiel
exception = Bitte verwenden Sie nur Werte zwischen 0 und 
intermediate1 = Eine Variante des SCAN Algorithmus stellt sicher, dass die Aufträge nur in eine 
intermediate2 = Bewegungsrichtungbearbeitet werden. Das heißt, kommt der Festplattenarm am eine Ende 
intermediate3 = der Festplatte an, bewegt er sich zurück zum anderen Ende, ohne dabei Anfragen zu bearbeiten.
intermediate4 = Diese Variante wird deshalb  C-SCAN (C steht dabei für circular) genannt.
intro1 = Disk Scheduling Algorithmen bestimmen die Reihenfolge in der eingegangene Lese- oder
intro2 = Schreibanfragen bearbeitet werden und somit die Bewegung des Festplattenarms und –kopfes.
intro3 = Beim SCAN Algorithmus (auch Aufzug  Algorithmus genannt) bewegt sich der Festplattenarm
intro4 = entweder in aufsteigende oder absteigende Richtung und bearbeitet auf seinem Weg zum Ende
intro5 = der Festplatte Anfragen in aufsteigender oder absteigender Reihenfolge.
intro6 = Dort angekommen, wird die Bewegung des Arms umgekehrt und die Bearbeitung fährt in die
intro7 = entgegengesetzte Richtung fort.
intro8 = Die initiale Richtung, in die sich der Festplattenarm bewegt, wird dabei durch die letzte
intro9 = bearbeitete Anfrage und die aktuelle Position des Kopfes bestimmt.
introHeader = Einleitung
name = Disk Scheduling: (C-)SCAN [DE]
outro1 = Durch die Vorgaben an die Bewegung des Diskarms kann es beim SCAN Algorithmus schnell passieren, 
outro2 = dass eingehende Anfragen an Zylinder, die vor kurzem vom Diskarm bearbeitet wurden längere Wartezeiten haben, 
outro3 = wenn immer weitere Anfragen eingehen, die passender auf dem Weg des Diskarms von einem zum anderen Ende liegen. 
outro4 = Des Weiteren werden hier Anfragen, die um die Mitte der Disk herum liegen, ebenfalls durch die vorgegebene 
outro5 = Bewegung, stark bevorzugt.
outro6 = Der CSCAN Algorithmus hingegen schafft dadurch, dass er, angekommen am einen Ende der Disk, auf dem Rückweg 
outro7 = keine Anfragen beantwortet, ausgeglichenere Wartezeiten und mehr Fairness für die Häufigkeit, in der der 
outro8 = Diskarm an den Zylindern der Disk vorbeikommt und dort Anfragen bearbeiten kann.
outroHeader = Fazit
result2 = Zurückgelegte Distanz
variationHeader = Variante