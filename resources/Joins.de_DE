noSuchKeyException=Es gibt keine Ressource f\u00fcr Eintrag {0}
iconNotFound=Icon ”{0}” nicht gefunden
algorithmName=SQL Joins
generatorName=SQL Joins [DE]
description[0]=Ein SQL-Join [1] ist eine Anweisung, um Spalten aus verschiedenen Tabellen zu einer neuen zusammenzufuegen.
description[1]=Es gibt mehrere Joins fuer unterschiedliche Ergebnisse. Hier werden der Cross Join [2], der Union Join [3] und der Natural Join [4] dargestellt.
description[2]=Der Cross Join liefert als Ergebnis den kartesischen Produkt beider Tabellen.
description[3]=Der Union Join liefert als Ergebnis die Vereinigung beider Tabellen. Leere Spalten werden mit NULL aufgefuellt.
description[4]=Der Natural Join ist eine Erweiterung des Cross Joins und erfordert mindestens eine gleichnamige Spalte in beiden Tabellen. Er verwirft alle Zeilen, deren Eintraege in diesen Spalten nicht in beiden Tabellen vorhanden sind.
description[5]=[1] https://de.wikipedia.org/wiki/Join_(SQL)
description[6]=[2] https://www.w3resource.com/sql/joins/cross-join.php
description[7]=[3] http://www.sql-tutorial.ru/en/book_explicit_join_operations/page3.html
description[8]=[4] https://de.wikipedia.org/wiki/Join_(SQL)#NATURAL_JOIN
description[9]=\n
description[10]=Zum Wechseln zwischen den verschiedenen Arten von Joins bitte zu den Primitiven wechseln.
sourcecode=Quelltext
animationstart=Animationsstart
codeComment[0]=Anzahl der Spalten mit gleichen Namen in der ersten und zweiten Tabelle bestimmen.
codeComment[1]=Die Spaltennamen in die neue Tabelle kopieren, ohne Duplikate.
codeComment[2]=Alle Zeilen in die neue Tabelle kopieren, bei denen die Werte in den gleichnamigen Spalten auch gleich sind.
codeComment[3]=Die ArrayList zurueck zu 2D String Array konvertieren.
codeCommentU[0]=Spaltennamen in die neue Tabelle uebernehmen.
codeCommentU[1]=Werte aus der ersten Tabelle uebernehmen.
codeCommentU[2]=Werte aus der zweiten Tabelle uebernehmen.
summary=Zusammenfassung
outro[0]=Dies war eine Implementierung der Funktionalitaet des Joins in Java.
outro[1]=Im richtigen Programmierleben wird man in der Regel keine Datenbank 
outro[2]=oder Abfragesprache implementieren muessen, da dies sehr aufwaendig ist. 
outro[3]=Die gängigen Programmiersprachen (inklusive Java) haben schon fertige 
outro[4]=Datenbanktreiber und die passenden Bibliotheken zum Nutzen der Abfragesprache.
intermission=\n
parseError[0]=Der Wert von joinType muss zwischen 1 und 3 liegen. 1 steht fuer Cross-Join, 2 fuer Union-Join, 3 fuer Natural-Join.
parseError[1]=Die erste Zeile der beiden vorgegebenen Tabellen stellt die Spaltennamen dar und darf keine leeren Felder enthalten!
question[0]=Muessen beide gegebenen Tabellen gleich gross sein?
questionFeedbackT[0.0]=Richtig! Beide Tabellen müssen nicht gleich gross sein.
questionFeedback[0.1]= Falsch! Beide Tabellen können unterschiedlich gross sein.
question[1]=Kann man als Ergebnis eines Joins eine der beiden existierenden Tabellen angeben?
questionFeedbackT[1.0]=Richtig! Es muss immer eine neue erstellt werden.
questionFeedback[1.1]=Falsch! Es kann nicht eine existierende Tabelle sein, weil sie sonst ueberschrieben wird.
question[2]=Fuehrt eine leere oder mit NULL gefuellter Zelle zu Problemen beim Ausfuehren des Join Befehls?
questionFeedbackT[2.0]=Richtig! Der Join Befehl ueberprueft die Werte der einzelnen Zellen nicht, sondern uebernimmt sie nur in die neue Tabelle.
questionFeedback[2.1]=Falsch! Es macht fuer den Join Befehl keinen Unterschied, ob und was in einer Zelle steht.
answerYes=Ja
answerNo=Nein