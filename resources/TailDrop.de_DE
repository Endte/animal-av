noSuchKeyException=Für den Schlüssel {0} kann keine Ressource gefunden werden
iconNotFound=Icon "{0}” wurde nicht gefunden
description=TailDrop ist der einfachste Congestion Control Algorithmus für Netzwerke. Der Router verwaltet intern eine FIFO mit einer festgelegten Kapazität. Wenn die FIFO diese Kapazität erreicht hat, werden alle eingehenden Pakete verworfen.
intro1=TailDrop ist der einfachste Überlastungskontrollalgorithmus für Netzwerke.
intro2=Der Router verwaltet intern eine FIFO mit einer festgelegten Kapazität.
intro3=Wenn die FIFO diese Kapazität erreicht hat, werden alle eingehenden Pakete verworfen.
FIFO_DECLARATION=Initialisiere eine leere FIFO mit der Kapazität "fifoCapacity"
INDEX_DECLARATION=Initialisiere den Index mit "0"
INCOMING_PACKET_DECLARATION=Nehme alle eingehenden Pakete entgegen
FOR_PACKET_ITERATION=Iteriere über alle eingegangenen Pakete
CHECK_FIFO_CAPACITY=Überprüfe ob die FIFO ihre Kapazitätsgrenze erreicht hat
DROP_PACKET=Verwirf das Paket, wenn die FIFO voll ist
CHECK_FIFO_CAPACITY_ELSE=Wenn die FIFO noch nicht voll ist
ENQUEUE_PACKET=Füge das Paket der FIFO hinzu, wenn sie noch nicht ihre Kapazitätsgrenze erreicht hat.
INCREMENT_INDEX=Erhöhe den Index
PROCESS_PACKET=Nimm das nächste Paket aus der FIFO und bearbeite es
UPDATE_FIFO_END=Aktualisiere die FIFO
summaryText1=Animation für TailDrop beendet.########Wie du sehen konntest, hat TailDrop diverse Pakete gedropped, allerdings erst als die FIFO voll war. Dadurch kommt die Congestion Control sehr spontan.########Zu vermerken ist, dass unsere Implementierung kein Feedback zu den Clients darstellt.########Du kannst die Startwerte via Show settings - Show variables sehen.
0summaryText2=Total dropped packets: {0}
summaryText3=Total enqueued packets: {0}
chapterIntro=Einleitung
chapterAlgo=Algorithmus
chapterSummary=Zusammenfassung
