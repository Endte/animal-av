noSuchKeyException=There is no ressource for the key {0}
iconNotFound=Icon "{0}” not  found
description=RED is a congestion control algorithm. RED monitors the average queue size and drops (or marks when used in conjunction with ECN) packets based on statistical probabilities. If the buffer is almost empty, then all incoming packets are accepted. As the queue grows, the probability for dropping an incoming packet grows too. When the buffer is full, the probability has reached 1 and all incoming packets are dropped. RED is more fair than tail drop, in the sense that it does not possess a bias against bursty traffic that uses only a small portion of the bandwidth. The more a host transmits, the more likely it is that its packets are dropped as the probability of a host's packet being dropped is proportional to the amount of data it has in a queue. Early detection helps avoid TCP global synchronization.
intro1=Random Early Detection (RED)
intro2=RED monitors the average queue size and drops (or marks when used in conjunction with ECN) packets based on statistical probabilities.
intro3=If the buffer is almost empty, then all incoming packets are accepted.
intro4=As the queue grows, the probability for dropping an incoming packet grows too.
intro5=When the buffer is full, the probability has reached 1 and all incoming packets are dropped.
intro6=RED is more fair than tail drop, in the sense that it does not possess a bias against bursty traffic that uses only a small portion of the bandwidth.
intro7=The more a host transmits, the more likely it is that its packets are dropped as the probability of a host's packet being dropped is proportional to the amount of data it has in a queue.
intro8=Early detection helps avoid TCP global synchronization.
intro9=
intro10=
FIFO_DECLARATION=Initialize an empty FIFO with the capacity `fifoCapacity`
INDEX_DECLARATION=Initialize the index with `0`
INCOMING_PACKET_DECLARATION=Get all incoming packets
FOR_PACKET_ITERATION=Iterate over all incoming packets
GET_RANDOM=Get random value
CALCULATE_DROP_PROBABILITY=Calculate drop probability
CHECK_DROP=Check if the packet should be dropped
DROP_PACKET=Drop the packet if the probability is high enough, if random >= drop probability
CHECK_DROP_ELSE=If the probability isn't high enough
ENQUEUE_PACKET=Enqueue the packet into the FIFO, if random < drop probability
PROCESS_PACKET=Process the next packet and dequeue it
UPDATE_FIFO_END=Move the packets inside the FIFO up
summaryText1=Finished animation for Random Early detection########As you could see, RED dropped some packets before the FIFO was full, thus keeping the network uncongested for a longer time.########It should be noted, that our implemenation doesn't show the client feedback.########You can see the values you set at the beginning via Show settings - Show variables.
summaryText2=Total dropped packets: {0}
summaryText3=Total enqueued packets: {0}
chapterIntro=Introduction
chapterAlgo=Algorithm
chapterSummary=Summary
