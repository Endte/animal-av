noSuchKeyException=Für den Schlüssel {0} kann keine Ressource gefunden werden
iconNotFound=Icon "{0}” wurde nicht gefunden
description=RED ist ein Congestion Control Algorithmus. RED überwacht die durchschnittliche Länge der FIFO und verwirft Pakete aufgrund statistischer Wahrscheinlichkeiten. Wenn die FIFO fast leer ist, werden alle eingehenden Pakete akzeptiert. Wird die FIFO voller, wächst auch die Wahrscheinlichkeit, dass ein Paket verworfen wird. Ist die FIFO voll, ist die Wahrscheinlichkeit 1 und alle eingehenden Pakete werden verworfen. RED ist gerechter als TailDrop, denn stoßartiger Verkehr wird nicht benachteiligt, wenn er nur einen kleinen Teil der Bandbreite beansprucht. Je mehr Hosts senden, desto wahrschinlicher ist es, dass Pakete verworfen werden. Die Wahrscheinlichkeit, dass ein Paket verworfen wird, ist proportional zu der Menge an Paketen in der FIFO. RED hilft globale TCP Synchronisationen zu vermeiden.
intro1=Random Early Detection (RED)
intro2=RED ist ein Congestion Control Algorithmus.
intro3=RED überwacht die durchschnittliche Länge der FIFO und verwirft Pakete aufgrund statistischer Wahrscheinlichkeiten.
intro4=Wenn die FIFO fast leer ist, werden alle eingehenden Pakete akzeptiert.
intro5=Wird die FIFO voller, wächst auch die Wahrscheinlichkeit, dass ein Paket verworfen wird.
intro6=Ist die FIFO voll, ist die Wahrscheinlichkeit 1 und alle eingehenden Pakete werden verworfen.
intro7=RED ist gerechter als TailDrop, denn stoßartiger Verkehr wird nicht benachteiligt, wenn er nur einen kleinen Teil der Bandbreite beansprucht.
intro8=Je mehr Hosts senden, desto wahrschinlicher ist es, dass Pakete verworfen werden.
intro9=Die Wahrscheinlichkeit, dass ein Paket verworfen wird, ist proportional zu der Menge an Paketen in der FIFO.
intro10=RED hilft globale TCP Synchronisationen zu vermeiden.
FIFO_DECLARATION=Initialisiere eine leere FIFO mit der Kapazität "fifoCapacity"
INDEX_DECLARATION=Initialisiere den Index mit "0"
INCOMING_PACKET_DECLARATION=Nehme alle eingehenden Pakete entgegen
FOR_PACKET_ITERATION=Iteriere über alle eingegangenen Pakete
GET_RANDOM=Würfel einen zufälligen Wert zwischen 0.0 und 1
CALCULATE_DROP_PROBABILITY=Berechne die Wahrscheinlichkeit, dass das Paket verworfen wird
CHECK_DROP=Bestimme ob das Paket verworfen werden soll
DROP_PACKET=Das Paket wird verworfen, wenn random >= drop Wahrscheinlichkeit.
CHECK_DROP_ELSE=Das Paket soll nicht verworfen werden
ENQUEUE_PACKET=Füge das Paket der FIFO hinzu, wenn random < drop Wahrscheinlichkeit
PROCESS_PACKET=Nimm das nächste Paket aus der FIFO und bearbeite es
UPDATE_FIFO_END=Aktualisiere die FIFO
summaryText1=Animation für Random Early Detection beendet.########Wie du sehen konntest, hat RED bereits einige Pakete verworfen bevor die FIFO voll war.########Durch diese frühzeitigen Gegenmaßnahmen hat RED das Netzwerk länger frei von Congestion gehalten, als e.g. TailDrop.########Zu vermerken ist, dass unsere Implementierung kein Feedback zu den Clients darstellt.########Du kannst die Startwerte via Show settings - Show variables sehen.
summaryText2=Anzahl gedroppter Pakete: {0}
summaryText3=Anzahl eingereihter Pakete: {0}
chapterIntro=Einleitung
chapterAlgo=Algorithmus
chapterSummary=Zusammenfassung
