noSuchKeyException=Es gibt keine Ressource f\u00fcr Eintrag {0}
iconNotFound=Icon ”{0}” not found
algorithmName=NegaMax Algorithmus
generatorName=NegaMax [DE]
description[0]=Der NegaMax-Algorithmus [1] ist ein Suchverfahren aus der Spieltheorie, welcher auf einem 2 Spieler Nullsummenspiel [2] operiert und als Spielbaum visualisiert wird.
description[1]=Ein Nullsummenspiel beschreibt Spiele, bei denen die Summe der Gewinne und Verluste aller Spieler, hier 2, zusammengenommen 0 ergibt.
description[2]=Der Algorithmus berechnet die optimale Spielzugstrategie fuer den Startspieler, unter der Annahme, dass beide Spieler optimale und perfekte Spielzuege durchfuehren.
description[3]=Das bedeutet, dass beide Spieler keine Fehler machen und immer den Zug mit dem fuer sie besten Wert auswaehlen.
description[4]=Dabei basiert NegaMax auf dem MiniMax [3] (oder auch MinMax) Algorithmus, nutzt jedoch die Tatsache aus, dass max(a,b) = -min(-a,-b) entspricht. Somit wird die Implementierung, im Vergleich zum Minimax Algorithmus vereinfacht.
description[5]=[1] https://en.wikipedia.org/wiki/Negamax
description[6]=[2] https://de.wikipedia.org/wiki/Nullsummenspiel
description[7]=[3] https://de.wikipedia.org/wiki/Minimax-Algorithmus
sourcecode=Quelltext
animationstart=Animationsstart
summary=Zusammenfassung
actualPlayer=Spieler am Zug:
outro[0]=Der Algorithmus terminiert mit dem Wert:
outro[1]=Das bedeutet, dass der Spieler
outro[2]=den Wert
outro[3]= erreichen wird, unter der Annahme, dass beide Spieler optimal spielen.
outro[4]=Trotz des recht kleinen Spielbaums, braucht der Algorithmus recht lange, um eine Lösung zu finden.
outro[5]=Die Laufzeit liegt bei O(|V| + |E| + C) wobei |V| die Anzahl der Knoten, |E| die Anzahl der Kanten und C die Anzahl der Vergleiche ist.
outro[6]=Somit ist der NegaMax Algorithmus von der Laufzeit vergleichbar mit der Tiefensuche.
outro[7]=Um NegaMax effektiv zu nutzen, gibt es mehrere heuristische Verfahren:
outro[8]=   1. NegaMax mit Alpha-Beta Pruning
outro[9]=   2. NegaMax mit Alpha-Beta Pruning und Transposition Tables
outro[10]=Siehe: https://en.wikipedia.org/wiki/Negamax
descFile[0]=Der NegaMax Algorithmus [1] ist ein Suchverfahren aus der Spieltheorie, welcher auf einem 2 Spieler Nullsummenspielen [2] operiert und als Spielbaum visualisiert wird. Ein Nullsummenspiel beschreibt Spiele, bei denen die Summe der Gewinne und Verluste aller Spieler, hier 2, zusammengenommen 0 ergibt.
descFile[1]=\n
descFile[2]=Der Algorithmus berechnet die optimale Spielzugstrategie fuer den Startspieler, unter der Annahme dass beide Spieler optimale und perfekte Spielzuege durchfuehren.
descFile[3]=\n
descFile[4]=Das bedeutet, dass beide Spieler keine Fehler machen und immer den Zug mit dem fuer sie besten Wert auswaehlen.
descFile[5]=\n
descFile[6]=Dabei basiert NegaMax auf dem MiniMax [3] (oder auch MinMax) Algorithmus, nutzt jedoch die Tatsache aus, dass max(a,b) = -min(-a,-b) entspricht. Somit wird die Implementierung, im Vergleich zum Minimax Algorithmus vereinfacht.
descFile[7]=\n
descFile[8]=\n
descFile[9]=[1] https://en.wikipedia.org/wiki/Negamax
descFile[10]=\n
descFile[11]=[2] https://de.wikipedia.org/wiki/Nullsummenspiel
descFile[12]=\n
descFile[13]=[3] https://de.wikipedia.org/wiki/Minimax-Algorithmus
descFile[14]=\n\n
intermission=Im Folgenden müssen die Spielbaumstruktur und der Startspieler folgende Werte haben: \n
descFile[15]=Die Spielbaumstruktur ist wie folgt aufgebaut: wurzel
descFile[16]=kindKnoten1
descFile[17]=kindKnoten1.1
descFile[18]=Blatt1.1.1 Blatt1.1.2 } kindKnoten1.2
descFile[19]=Blatt1.2.1 Blatt1.2.2 } } kindKnoten12
descFile[20]=Blatt2.1 Blatt2.2 } }
descFile[21]=\n
descFile[22]=Beachte, dass der Kindknoten ein Buchstabe und das Blatt eine positive Ganzzahl sein muss. Ein weiteres Beispiel: A
descFile[23]=B
descFile[24]=1 13 4 } C
descFile[25]=3 6 8 } D
descFile[26]=9 5 14 } }
descFile[27]=\n
descFile[28]=Der Startspieler muss entweder den Wert 1 für MAX oder den Wert -1 für MIN haben.
parseError[0]=Fehler beim Parsen des Baums. \n
parseError[1]=\n\n Eingegebener Baum: \n
parseError[2]=\n\n Zudem muss der Startspieler den Wert 1 für MAX oder -1 für MIN sein. Eingegebener Wert: \n
parseError[3]=Startspieler muss entweder 1 für MAX oder -1 für MIN sein. Eingegebener Wert: \n
startPlayer=Startspieler
question[0]=Wer ist der Anfangsspieler?
questionFeedbackT[0.0]=Richtig, MAX Spieler ist am Zug. Er versucht, den maximalen Wert seiner Kindknoten zu erlangen.
questionFeedback[0.0]= Falsch! MAX wäre richtig gewesen!
questionFeedbackT[0.1]=Richtig, MIN Spieler ist am Zug. Er versucht, den Wert seiner Kindknoten zu minimieren.
questionFeedback[0.1]= Falsch! MIN wäre richtig gewesen!
question[1]=Welche Komplexitätsklasse hat der Algorithmus?
questionFeedbackT[1.0]=Richtig! Somit ist die Komplexität mit der Tiefensuche vergleichbar!
questionFeedback[1.1]=Falsch. O(|V|+|E|+C) waere richtig gewesen.
question[2]=Welche Annahme macht den Algorithmus effizienter als den MinMax Algorithmus?
questionFeedbackT[2.0]=Richtig!
questionFeedback[2.1]=Falsch. max(a,b)=-min(-a,-b) waere richtig gewesen!
question[3]=Welche Wert konnte der Anfangsspieler erreichen?
questionFeedbackT[3.0]=Richtig!
questionFeedback[3.1]=Falsch!