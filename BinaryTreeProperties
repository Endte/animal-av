--deutsche Dokumentation Binärbaum

-- Bei insert/remove ist {0} der eingefügte/gelöschte Schlüssel. 
-- Bei swap/exchange ist {0} der Vater/Schlüssel1 und {1} der Sohn/Schlüssel2
-- Creation bekommt nichts sinnvolles übergeben.
-- Die Schwierigkeitsgrade expert/intermediate/novice können jeweile 1/2/4 Zeilen 
-- Dokumentation verarbeiten.

insert.expert.de = Der Binärbaum nach der Operation insert({0}).
remove.expert.de = Der Binärbaum nach der Operation remove({0}).
swap.expert.de = Operation swap({0},{1}).
exchange.expert.de = Operation exchange({0},{1}).
creation.expert.de = Aus dem übergebenen Vektor erzeugter Binärbaum.
insert.intermediate1.de = Der Binärbaum nach der Operation insert({0}).
insert.intermediate2.de = Der Schlüssel {0} wurde an die Position {1} im Baum geschrieben.
remove.intermediate1.de = Der Binärbaum nach der Operation remove({0}).
remove.intermediate2.de = Der Schlüssel wurde von Position {1} gelöscht und gegebenenfalls durch den linken oder rechten Sohn ersetzt.
swap.intermediate1.de = Operation swap({0},{1}). Der Vaterknoten {0} wurde mit seinem Sohn {1} vertauscht.
exchange.intermediate1.de = Operation exchange({0},{1}). Die Schlüssel {0} und {1} wurden vertauscht.
creation.intermediate1.de = Aus dem übergebenen Vektor ist beim Einlesen dieser Binärbaum entstanden.
insert.novice1.de = Der Binärbaum nach der Operation insert({0}).
insert.novice2.de = Der Schlüssel {0} wurde an der Stelle {1} der sequentiellen Darstellung des Baumes eingefügt.
insert.novice3.de = Solange der Platz nicht schon besetzt ist, gibt es hierbei nichts zu beachten.
remove.novice1.de = Der Binärbaum nach der Operation remove({0}). Der Schlüssel wurde an Stelle {1} entfernt.
remove.novice2.de = Falls dieser Schlüssel kein Blatt war, wird er durch den linken oder rechten Sohn ersetzt.
remove.novice2.de = Dadurch entsteht wieder ein zusammenhängender Baum.
swap.novice1.de = Operation swap({0},{1}). Hierbei wird der Vaterknoten {0} mit seinem Sohn {1} vertauscht.
exchange.novice1.de = Operation exchange({0},{1}). Die Knoten {0} und {1} werden vertauscht. Hierzu ist es 
exchange.novice2.de = egal an welchen Positionen sie im Baum vorkommen.
creation.novice1.de = Beim erzeugen des Binärbaums ist aus dem übergebenen Vektor dieser Binärbaum entstanden.

--english documentation binary tree

-- For insert/remove {0} is the inserted/removed key. 
-- For swap/exchange {0} is the father/key1 and {1} is the son/key2
-- Creation has no parameters.
-- The documentationlevels expert/intermediate/novice are able to work with
-- 1/2/4 lines of documentation text.

insert.expert.eng = Binary tree after operation insert({0}).
remove.expert.eng = Binary tree after operation remove({0}).
swap.expert.eng = Operation swap({0},{1}).
exchange.expert.eng = Operation exchange({0},{1}).
creation.expert.eng = Constructed binary tree from the given vector.
insert.intermediate1.eng = Binary tree after operation insert({0}). 
insert.intermediate2.eng = The key {0} was inserted at position {1}.
remove.intermediate1.eng = Binary tree operation remove({0}).
remove.intermediate2.eng = The key {0} was removed from position {1}.
swap.intermediate1.eng = Operation swap({0},{1}).
swap.intermediate2.eng = The father {0} was swapped with its son {1}.
exchange.intermediate1.eng = Operation exchange({0},{1}). The two nodes {0} and {1} 
exchange.intermediate2.eng = were exchanged.
creation.intermediate1.eng = From the given vector this binary tree was consructed.
insert.novice1.eng = Binary tree after operation insert({0}).
insert.novice2.eng = The key {0} was inserted at position {1} in the sequential representation
insert.novice3.eng = of the binary tree. While this position is not already occupied, there´s 
insert.novice4.eng = nothing else to regard.
remove.novice1.eng = Binary tree after operation remove({0}). 
remove.novice2.eng = The key {0} was removed from position {1}. If {0} wasn´t a leaf node
remove.novice3.eng = it will be replaced by either its left or right son.
swap.novice1.eng = Operation swap({0},{1}). The father node {0} was swapped with its son {1}.
exchange.novice1.eng = Operation exchange({0},{1}). Node {0} and Node {1} were exchanged. 
creation.novice1.eng = During the creation of the binary tree, this tree was given in the 
creation.novice2.eng = sequential representation.


